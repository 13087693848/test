                                        
//短进程优先调度算法
#include<stdio.h>
#include<stdlib.h>
#define MAX 10
 
/* 定义进程控制块PCB */
struct pcb{
	char name[10]; //进程名
	int super;     //进程优先级
	int need_time;  //运行时间
	float come_time;   //到达时间
	float start_time; //开始运行时间
	float end_time;   //结束运行时间
	int run_flag;     //调度标志
	int order;        //运行次序
}p[MAX];
 
/* 建立进程控制块函数 输入进程信息*/
int input(){
	int i,num;
	printf("\n请输入进程数:");
	scanf("%d",&num);
	for(i=0;i<num;i++){
		printf("\n******************************");
		printf("\n进程号:%d\n",i);
		printf("请输入进程名:");
		scanf("%s",&p[i].name);
		printf("请输入进程到达时间:");
		scanf("%f",&p[i].come_time);
		printf("请输入进程运行时间:");
		scanf("%d",&p[i].need_time);
		printf("请输入进程优先级:");
		scanf("%d",&p[i].super);
		p[i].start_time = 0;
		p[i].end_time = 0;
	}
	printf("\n");
	return num;
}
 
/* 显示 */
void print(int num){
	int k;
	float turn_round_time=0,f1,w=0;
	float s1=0;
	float s2=0;
	printf("调用最短进程优先算法以后进程运行的顺序是: ");
	printf("%s",p[0].name);
	for(k=1;k<num;k++){
		printf("-->");
		printf("%s",p[k].name);
	}
	printf("\n");
	printf("具体进程信息调度信息:\n");
	printf("进程名  到达时间  运行时间  开始时间  结束时间  优先级  周转时间  带权周转时间\n");
	for(k=0;k<num;k++){
		f1=p[k].end_time - p[k].come_time; 
		turn_round_time += f1; 
		w += (f1 / p[k].need_time);
		s1 = (float)p[k].need_time;
		s2 = f1;
 
		printf("%4s",p[k].name);
		printf("%10.2f",p[k].come_time);
		printf("%10d",p[k].need_time);
		printf("%10.2f",p[k].start_time);
		printf("%10.2f",p[k].end_time);
		printf("%10d",p[k].super);
		printf("%10.2f",f1);
		printf("%10.2f",s2 / s1);
		printf("\n");
	}
	printf("平均周转时间=%5.2f\n",turn_round_time/num);
	printf("平均带权周转时间=%5.2f\n",w/num);
}
 
/* 短进程优先 */
void sjff(int counter){
	float tmp_time = 0;
	int i=0,j=1;
	int num_schedul, tmp_counter;/* 正在被调度执行的进程编号和已经调度完成的进程个数*/
	float run_time;
	run_time = (float)p[i].need_time;
	/* 从到达时间最早且相同的进程中查找第一个被调度的进程 */
	while((j<counter)&&(p[i].come_time==p[j].come_time)){
		if(p[j].need_time<p[i].need_time){
			run_time = (float)p[j].need_time;
			i=j;
		}
		j++;
	}
	/* 对第一个被调度的进程求相应的参数	*/
	num_schedul = i;
	p[num_schedul].start_time = p[num_schedul].come_time;
	p[num_schedul].end_time = p[num_schedul].start_time + p[num_schedul].need_time;
	p[num_schedul].run_flag = 1;
	tmp_time = p[num_schedul].end_time;
	p[num_schedul].order = 1;
	tmp_counter = 1;
	/* 循环查找下一个被调度的进程，直到所有的tasks[j].run_flag ==1*/
	while(tmp_counter<counter){
		for(j=0;j<counter;j++){
			if((p[j].come_time<=tmp_time)&&(!p[j].run_flag)){
				run_time=(float)p[j].need_time;
				num_schedul = j;
				break;
			}
		}
		/*	找到到“目前”为止,最短的进程，即run_time最小的进程 */
		for(j=0;j<counter;j++){
			if((p[j].come_time<=tmp_time)&&(!p[j].run_flag)){
				if(p[j].need_time<run_time){
					run_time=(float)p[j].need_time;
					num_schedul=j;
				}
			}
		}
		/* 对找到的下一个被调度的进程求相应的参数	*/
		p[num_schedul].start_time=tmp_time;
		p[num_schedul].end_time=p[num_schedul].start_time + p[num_schedul].need_time;
		p[num_schedul].run_flag=1;
		tmp_time=p[num_schedul].end_time;
		tmp_counter++;
		p[num_schedul].order=tmp_counter;
	}
}
 
/* 主函数 */
int main(){
	int counter = 0;
	printf("\n");
	printf("<<----------******短进程优先调度算法******---------->>");
	counter = input();
	sjff(counter);
	print(counter);
	return 0;
}

                                    